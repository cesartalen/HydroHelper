// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                String              @id @default(cuid()) @map("_id")
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  waterLogs         WaterLog[]
  createdAt         DateTime            @default(now())
  UserTrackerPreset UserTrackerPreset[]
}

model UserTrackerPreset {
  id          String @id @default(cuid()) @map("_id")
  dailyGoal   Int    @default(3500)
  waterPreset Int    @default(250)
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WaterLog {
  id     String   @id @default(cuid()) @map("_id")
  date   DateTime @default(now())
  user   User?    @relation(fields: [userId], references: [id])
  userId String?
  amount Int      @default(0)

  @@unique([userId, date])
}
